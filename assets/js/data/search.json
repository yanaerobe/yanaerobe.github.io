[ { "title": "进阶(System)Verilog笔记", "url": "/posts/advanced-systemverilog/", "categories": "乱抄, Verilog", "tags": "Verilog", "date": "2022-10-06 21:09:50 +0000", "snippet": "格式规范 摘自lowRISC Verilog Coding Style Guide偏好parameter而非define，模块内基于其他parameter的参数使用localparam。常量参数采用UPPER_CASE，而可配置的参数采用UpperCamelCase。iverilog与gtkwaveTBD" }, { "title": "划水周记（3）", "url": "/posts/water-doctor/", "categories": "杂谈, 周记", "tags": "nonsense", "date": "2022-09-19 23:53:13 +0000", "snippet": "讲道理，把自己的划水经历赤裸裸地摆在台面上让人公开处刑，还蛮是一种催人奋进的方法。第三周甚至不清楚到底是因为自己确实划，还是起步有断层所以显得进度很慢了。总结问题：primer没落到实处-&gt;完成工作耗时太长+没有正确的工作顺序-&gt;频繁更换手头任务+没有任何实质推进暂停彻底分解Copycat具体机制，转战成效更直接的codelet在接口的micro op上。另外，周中可以做点DIC工作分散一下压力。注意不要跟去年一样逼得自己啥都搞不定。本周任务： (0/1)完成codelet在硬件上的micro op解析 (0/1)至少初步地了解COMP接口次要： (0/20)20页Kanerva第二周没能完成coderack，甚至主函数都只完成了部分入口。文档的编写让自己意识到Copycat的具体实现实际上非常动态且复杂。例如，Slipnet和Workspace有着相当复杂的互动，主流程之外有着非常多的自定义函数还不清楚原理。然而，当前版本的Slipnet应当是相对静态的。这一问题和软硬件界面的位置成了已知的两大问题。本周任务： (0/1)完成可读的文档第一版草稿，i.e.，理解Copycat的具体实现方法。 (0.7/1)尽量推进完成Cat()和Coderack()。次要： (0/2)完成Workspace和EasyCopy。 (9/20)推进20-30页Kanerva。第一周讲道理，工作上不是很成功的一周：入学手续意外地拖拉，暂时无法适应居家办公，周末花费了太多时间在化学实验入门（做饭）上。学了不少python内容，虽然这语言本身语法也烂简单。根据以往的经验来看，作息和生活事务的阵痛很快就会过去，这一点不需要太担心。但是下周得慢慢学会居家办公，看看能不能网上找点辅助工具。手头工作是写一个简单版Copycat，整体不复杂。目前遇到的难点有这几个： workspace到底是个什么？文献读得有点迷糊：好像没有workspace也能跑？而且Alex也说软硬件交界面就在workspace上。这似乎就是一个可以被处理掉的部件。 更新：workspace是slipnet的缓存，详见（即将要写的）说明文档。有关它的接口，可以先放一下。 codelets的运行方式没有非常搞懂，包括：本身的内容，调用的逻辑。这个可以结合现有的项目照猫画虎搞定，只是bug和性能肯定血烂。 长远地看，codelets list应当是要结合interface的反馈采用非监督学习完成。目前看起来非常复杂，并且暂时也不是需要考虑的问题。本周任务： (0.75/2)分析co.py.cat代码，作为EasyCopy和文档的参考，完成主函数和coderack。 (1/1)推进文档草稿工作，在文献里找找描述codelets的文件，完成skeleton。 抱着让别人看懂的想法，一边学一边给自己的问题写备忘就很够了。次要任务： (0/2)完成Workspace和EasyCopy。 (15/20)推进20-30页Kanerva。" }, { "title": "Python小入门一下", "url": "/posts/python-starter/", "categories": "乱抄, python", "tags": "python", "date": "2022-09-15 11:30:40 +0000", "snippet": "引文均来自网络，如有侵权请联系删除 在python的解释器内部，当我们调用t.prt()时，实际上Python解释成Test.prt(t)，也就是说把self替换成类的实例。e.g. “水果”里有一种“苹果”，当我们“吃苹果”的时候，其实是把“苹果”代入到“吃水果”这一行为中，而非“苹果”自己又产生了一个单独的“吃”行为。这就是self在方法中的作用。这似乎是面向对象的核心精神之一！创建一个对象不要忘了给类加括号。构建方法就是__init__，其实就是这个类默认的初始化而已；前后双下划线代表的是特别的函数（还不知道是啥函数） 需要注意的是，在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名。 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问。 有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。要单纯地运行一个方法，使用_ = function()，其中_可以用任何没有影响的变量名代替，这一变量仅仅是形式上的。logging模块无法正常运行暂时没有明白是什么情况。" }, { "title": "Some Cheats", "url": "/posts/some-cheats/", "categories": "乱抄, cheats", "tags": "cheats", "date": "2022-08-22 14:08:37 +0000", "snippet": "Kolmogrov Complexity事实上，任何可用简短的程序打印的数值不可能是随机的，随机数值是不可压缩的。vim cheatsglobal replacement: % s/foo/bar/gglobal delete: % s/foodelete foo rows: g/foo/dkeep only foo rows: v/foo/dmd cheats2 waves: strikeout2 equals: ==highlight== slash-space: list - [ ] : check-list - [x] : checked-list greater-space: blockquote4 spaces: codesquare-name-square-bracket-url-bracket: URLexclamatioin-ditto: git cheatsRemember to rename parent directory if duplicated.git commit –amend -m “xxx” &amp;&amp; git push -uf origin: extremely useful to one-time forcifully fix last push.rebase.false: traditional mergerebase.true: concatenate dev commits after mainscp cheatsupload /foo to /bar: scp /foo usr@ip:/bardownload: simply reverse-r for directory, -P for porttar cheatscreate foo.tar from ./bar: tar -cf foo.tar ./bardecompress: tar -xf foo.tar-c for create, -x for decompress, -t for view contents-v for verbose, -f for file(always the last one)-g for gzip2" } ]
