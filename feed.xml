<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://yanjyang.github.io//</id><title>道.log</title><subtitle>In a 烂大街但确实好看的 theme. </subtitle> <updated>2022-10-06T22:05:41+00:00</updated> <author> <name>Yanjun YANG</name> <uri>https://yanjyang.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://yanjyang.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://yanjyang.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Yanjun YANG </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>进阶(System)Verilog笔记</title><link href="https://yanjyang.github.io//posts/advanced-systemverilog/" rel="alternate" type="text/html" title="进阶(System)Verilog笔记" /><published>2022-10-06T21:09:50+00:00</published> <updated>2022-10-06T21:09:50+00:00</updated> <id>https://yanjyang.github.io//posts/advanced-systemverilog/</id> <content src="https://yanjyang.github.io//posts/advanced-systemverilog/" /> <author> <name>Yanjun YANG</name> </author> <category term="乱抄" /> <category term="Verilog" /> <summary> 格式规范 摘自lowRISC Verilog Coding Style Guide 偏好parameter而非define，模块内基于其他parameter的参数使用localparam。 常量参数采用UPPER_CASE，而可配置的参数采用UpperCamelCase。 iverilog与gtkwave TBD </summary> </entry> <entry><title>划水周记（3）</title><link href="https://yanjyang.github.io//posts/water-doctor/" rel="alternate" type="text/html" title="划水周记（3）" /><published>2022-09-19T23:53:13+00:00</published> <updated>2022-10-03T15:33:25+00:00</updated> <id>https://yanjyang.github.io//posts/water-doctor/</id> <content src="https://yanjyang.github.io//posts/water-doctor/" /> <author> <name>Yanjun YANG</name> </author> <category term="杂谈" /> <category term="周记" /> <summary> 讲道理，把自己的划水经历赤裸裸地摆在台面上让人公开处刑，还蛮是一种催人奋进的方法。 第三周 甚至不清楚到底是因为自己确实划，还是起步有断层所以显得进度很慢了。 总结问题：primer没落到实处-&amp;gt;完成工作耗时太长+没有正确的工作顺序-&amp;gt;频繁更换手头任务+没有任何实质推进 暂停彻底分解Copycat具体机制，转战成效更直接的codelet在接口的micro op上。另外，周中可以做点DIC工作分散一下压力。 注意不要跟去年一样逼得自己啥都搞不定。 本周任务： (0/1)完成codelet在硬件上的micro op解析 (0/1)至少初步地了解COMP接口 次要： (0/20)20页Kanerva 第二周 没能完成coderack，甚至主函数都只完成了部分入口。文档的编写让自己意识到Copycat的具体实现实际上非常动态且复杂。例如，Sl... </summary> </entry> <entry><title>Python小入门一下</title><link href="https://yanjyang.github.io//posts/python-starter/" rel="alternate" type="text/html" title="Python小入门一下" /><published>2022-09-15T11:30:40+00:00</published> <updated>2022-09-28T09:07:27+00:00</updated> <id>https://yanjyang.github.io//posts/python-starter/</id> <content src="https://yanjyang.github.io//posts/python-starter/" /> <author> <name>Yanjun YANG</name> </author> <category term="乱抄" /> <category term="python" /> <summary> 引文均来自网络，如有侵权请联系删除 在python的解释器内部，当我们调用t.prt()时，实际上Python解释成Test.prt(t)，也就是说把self替换成类的实例。 e.g. “水果”里有一种“苹果”，当我们“吃苹果”的时候，其实是把“苹果”代入到“吃水果”这一行为中，而非“苹果”自己又产生了一个单独的“吃”行为。这就是self在方法中的作用。 这似乎是面向对象的核心精神之一！ 创建一个对象不要忘了给类加括号。 构建方法就是__init__，其实就是这个类默认的初始化而已；前后双下划线代表的是特别的函数（还不知道是啥函数） 需要注意的是，在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名。... </summary> </entry> <entry><title>Some Cheats</title><link href="https://yanjyang.github.io//posts/some-cheats/" rel="alternate" type="text/html" title="Some Cheats" /><published>2022-08-22T14:08:37+00:00</published> <updated>2022-10-06T22:05:26+00:00</updated> <id>https://yanjyang.github.io//posts/some-cheats/</id> <content src="https://yanjyang.github.io//posts/some-cheats/" /> <author> <name>Yanjun YANG</name> </author> <category term="乱抄" /> <category term="cheats" /> <summary> Kolmogrov Complexity 事实上，任何可用简短的程序打印的数值不可能是随机的，随机数值是不可压缩的。 vim cheats global replacement: % s/foo/bar/g global delete: % s/foo delete foo rows: g/foo/d keep only foo rows: v/foo/d md cheats 2 waves: strikeout 2 equals: ==highlight== slash-space: list - [ ] : check-list - [x] : checked-list greater-space: blockquote 4 spaces: code square-name-squar... </summary> </entry> </feed>
